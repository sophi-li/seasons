{"ast":null,"code":"var _jsxFileName = \"/Users/SophiaLi/Documents/git/seasons/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom'; // Functional component:\n// const App = () => {\n//     window.navigator.geolocation.getCurrentPosition(\n//         (position) => console.log(position),\n//         (err) => console.log(err)\n//     )\n//     return (\n//     <div>Latitude: </div>\n//     )\n// }\n// Class based component\n// We are subclassing React.Component, basically borrowing functionality into our App class\n\nclass App extends React.Component {\n  // define constructor method\n  constructor(props) {\n    super(props); // this is the ONLY time we do direct assignment to state\n\n    this.state = {\n      lat: null,\n      errorMessage: ''\n    };\n    window.navigator.geolocation.getCurrentPosition(position => {\n      // we called setState which is a react component!\n      this.setState({\n        lat: position.coords.latitude\n      });\n    }, err => {\n      this.setState({\n        errorMessage: err.message\n      });\n    });\n  }\n\n  componentDidMount() {\n    console.log('My comp rendered');\n  }\n\n  componentDidUpdate() {\n    console.log('My comp updated');\n  } // We have to define render when using React\n\n\n  render() {\n    // return (\n    // <div>Latitude: {this.state.lat}\n    // < br />\n    // Error: {this.state.errorMessage}\n    // </div>\n    // );\n    // conditional rendering - returning different JSX depending on state/props of the component\n    if (this.state.errorMessage && !this.state.lat) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Error: \", this.state.errorMessage);\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Latitude: \", this.state.lat);\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Loading!\");\n  }\n\n}\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 65\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/SophiaLi/Documents/git/seasons/src/index.js"],"names":["React","ReactDOM","App","Component","constructor","props","state","lat","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","message","componentDidMount","console","log","componentDidUpdate","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAC9B;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,GAAG,EAAE,IAAN;AAAYC,MAAAA,YAAY,EAAE;AAA1B,KAAb;AAEAC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CACIC,QAAQ,IAAI;AACR;AACA,WAAKC,QAAL,CAAe;AAAEP,QAAAA,GAAG,EAAEM,QAAQ,CAACE,MAAT,CAAgBC;AAAvB,OAAf;AACH,KAJL,EAKIC,GAAG,IAAI;AACH,WAAKH,QAAL,CAAc;AAAEN,QAAAA,YAAY,EAAES,GAAG,CAACC;AAApB,OAAd;AACH,KAPL;AAUH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACH;;AAEDC,EAAAA,kBAAkB,GAAG;AACjBF,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACH,GAzB6B,CA2B9B;;;AACAE,EAAAA,MAAM,GAAG;AACL;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,QAAI,KAAKjB,KAAL,CAAWE,YAAX,IAA2B,CAAC,KAAKF,KAAL,CAAWC,GAA3C,EAAgD;AAChD,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAc,KAAKD,KAAL,CAAWE,YAAzB,CAAP;AACC;;AACD,QAAG,CAAC,KAAKF,KAAL,CAAWE,YAAZ,IAA4B,KAAKF,KAAL,CAAWC,GAA1C,EAA+C;AAC3C,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAgB,KAAKD,KAAL,CAAWC,GAA3B,CAAP;AACH;;AACD,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACH;;AA5C6B;;AAgDlCN,QAAQ,CAACsB,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Functional component:\n// const App = () => {\n//     window.navigator.geolocation.getCurrentPosition(\n//         (position) => console.log(position),\n//         (err) => console.log(err)\n//     )\n//     return (\n//     <div>Latitude: </div>\n//     )\n// }\n\n// Class based component\n// We are subclassing React.Component, basically borrowing functionality into our App class\nclass App extends React.Component {\n    // define constructor method\n    constructor(props) {\n        super(props);\n        // this is the ONLY time we do direct assignment to state\n        this.state = {lat: null, errorMessage: '' };\n\n        window.navigator.geolocation.getCurrentPosition(\n            position => {\n                // we called setState which is a react component!\n                this.setState( { lat: position.coords.latitude })\n            },\n            err => {\n                this.setState({ errorMessage: err.message })\n            }\n            \n        )\n    }\n\n    componentDidMount() {\n        console.log('My comp rendered')\n    }\n\n    componentDidUpdate() {\n        console.log('My comp updated')\n    }\n\n    // We have to define render when using React\n    render() {  \n        // return (\n        // <div>Latitude: {this.state.lat}\n        // < br />\n        // Error: {this.state.errorMessage}\n        // </div>\n        // );\n\n        // conditional rendering - returning different JSX depending on state/props of the component\n        if (this.state.errorMessage && !this.state.lat) {\n        return <div>Error: { this.state.errorMessage}</div>\n        }\n        if(!this.state.errorMessage && this.state.lat) {\n            return <div>Latitude: {this.state.lat}</div>\n        }\n        return <div>Loading!</div>\n    }\n}\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"]},"metadata":{},"sourceType":"module"}